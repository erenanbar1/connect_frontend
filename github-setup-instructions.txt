# GitHub Repository Setup Instructions for Connect Software Website

## Step 1: Create a New Repository on GitHub
1. Go to GitHub (https://github.com) and sign in to your account
2. Click the "+" icon in the top-right corner and select "New repository"
3. Fill in the repository details:
   - Repository name: "connect-software-website" (or any name you prefer)
   - Description: "Modern frontend website for Connect Software"
   - Visibility: Choose either Public or Private
   - Leave the "Initialize this repository with a README" option unchecked
4. Click "Create repository"

## Step 2: Initialize Git in Your Local Project
Open your terminal/command prompt and navigate to your project directory. Then run:

# Navigate to your project directory (adjust the path as needed)
cd path/to/connect-software-website

# Initialize a new Git repository
git init

## Step 3: Add and Commit Your Files
# Add all files to the staging area
git add .

# Commit the files with a message
git commit -m "Initial commit: Connect Software website frontend"

## Step 4: Connect to the Remote Repository
After creating your repository on GitHub, you'll see a page with instructions. Use the commands under "â€¦or push an existing repository from the command line":

# Replace the URL with your actual repository URL
git remote add origin https://github.com/yourusername/connect-software-website.git

# Set the main branch (GitHub now uses 'main' instead of 'master' by default)
git branch -M main

## Step 5: Push Your Code to GitHub
# Push your code to GitHub
git push -u origin main

## Step 6: Verify Your Repository
1. Go to your GitHub account and navigate to the repository
2. You should see all your project files there
3. Your repository is now set up and ready for collaboration!

## Additional Tips

### Creating a Good README.md
A good README helps others understand your project. Create a file named README.md in your project root with content like:

# Connect Software Website

Modern, responsive website for Connect Software, showcasing our enterprise software solutions.

## Features

- Responsive design for all device sizes
- Interactive code display
- Background animations
- Comprehensive sections for services, case studies, and team members

## Technologies Used

- Next.js
- React
- Tailwind CSS
- shadcn/ui components

## Getting Started

1. Clone the repository
2. Install dependencies: `npm install`
3. Run the development server: `npm run dev`
4. Open [http://localhost:3000](http://localhost:3000) in your browser

### Setting Up .gitignore
Create a file named .gitignore in your project root with the following content:

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

### Setting Up GitHub Pages (Optional)
If you want to deploy your site directly from GitHub:

1. Go to your repository settings
2. Scroll down to "GitHub Pages" section
3. Select the branch you want to deploy (usually "main")
4. Click "Save"

Your site will be available at https://yourusername.github.io/connect-software-website/

### Common Git Commands for Future Use
# Check status of your repository
git status

# Create and switch to a new branch
git checkout -b feature-name

# Switch to an existing branch
git checkout branch-name

# Pull latest changes from remote repository
git pull origin main

# Add specific files
git add filename.js

# Commit changes with a message
git commit -m "Description of changes"

# Push changes to remote repository
git push origin branch-name

# Merge changes from main into your branch
git merge main

# View commit history
git log
